// fixed:
// x := x!
// y := y!
// width := width!
// height := height!

// bin:
// x := 0
// y := 0
// width := width^
// height := height^

// hbox:
// translation_x := translation_x{-1} + width{-1}
//                | 0
// y := 0

// vbox:
// translation_x := 0
// translation_y := translation_y{-1} + height{-1}
//                | 0

// grid:
// translation_x := translation_x{-1} + width{-1} ? translation_x{-1} + + width{-1} + width! < width^
//                | 0
// translation_y := translation_y{-1} ? translation_x{-1} + width{-1} + width! < width^
//                | max_y{-1}
//                | 0
// max_y         := Math.max(translation_y! + height!, max_y{-1})
//                | translation_y! + height!

let LayoutParser = ometa(BaseStrParser) {
  space        = ^space | fromTo('//', '\n'),

  // Numbers:
  number       = spaces <digit+ ('.' digit+)?>:f                          -> parseFloat(f),

  // Identifiers:
  nameFirst    = letter | '$' | '_',
  nameRest     = nameFirst | digit,
  name         = spaces <nameFirst nameRest*>,

  // Expressions:
  expr         = expr:x "||" andExpr:y                                    -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                  -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                               -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                               -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                               -> [#binop, "===", x, y]
                          | "!==" relExpr:y                               -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                       -> [#binop, ">",   x, y]
                           | ">="         addExpr:y                       -> [#binop, ">=",  x, y]
                           | "<"          addExpr:y                       -> [#binop, "<",   x, y]
                           | "<="         addExpr:y                       -> [#binop, "<=",  x, y]
                           )
               | addExpr,
  addExpr     = addExpr:x "+" mulExpr:y                                   -> [#binop, "+",   x, y]
               | addExpr:x "-" mulExpr:y                                  -> [#binop, "-",   x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                    -> [#binop, "*",   x, y]
               | mulExpr:x "/" unary:y                                    -> [#binop, "/",   x, y]
               | mulExpr:x "%" unary:y                                    -> [#binop, "%",   x, y]
               | unary,
  unary        = "-"      primExpr:p                                      -> [#unop,  "-",   p]
               | "+"      primExpr:p                                      -> [#unop,  "+",   p]
               | primExpr,
  primExpr     = primExpr:p ( "[" expr:i "]"                              -> [#getp, i, p]
                            | "." name:m "(" listOf(#expr, ','):as ")"    -> [#send, m, p].concat(as)
                            | "." name:f                                  -> [#getp, [#string, f], p]
                            | "(" listOf(#expr, ','):as ")"               -> [#call, p].concat(as)
                            )
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                           -> e
               | name:n "!"                                               -> [#currentChild, n]
               | name:n "^"                                               -> [#parent, n]
               | name:n "{" expr:i "}"                                    -> [#child, i, n]
               | name:n                                                   -> [#get, n]
               | number:n                                                 -> [#number, n]
               | "[" enum(#expr, ','):es "]"                              -> [#arr].concat(es),

  // Associations:
  assocExpr    = expr:e "?" expr:c                                        -> [#condCalcExpr, c, e]
               | expr:e                                                   -> [#calcExpr, e],

  assoc        = name:n ":=" listOf(#assocExpr, "|"):es                   -> [#assoc, n].concat(es),

  allocation   = (assoc:s spaces -> s)*:ss end                            -> [#allocation].concat(ss),
};
