// fixed:
// x := !x
// y := !y
// width := !width
// height := !height

// bin:
// x := 0
// y := 0
// width := ^width
// height := ^height

// hbox:
// x := x{-1}
//    | 0
// y := 0
// width := ^width / ^length
// height := ^height

// vbox:
// x := 0
// y := y{-1}
//    | 0
// width := ^width
// height := ^height / ^length

// grid:
// x := x{-1}               ? x + !width < ^width
//    | 0
// y := y{-1}               ? x + !width < ^width
//    | y{-1} + height{-1}
// width := !width
// height := !height

let LayoutParser = ometa(BaseStrParser) {
  space = ^space | fromTo('#', '\n'),

  // Identifiers:
  nameFirst    = letter | '$' | '_',
  nameRest     = nameFirst | digit,
  iName        = <nameFirst nameRest*>,

  // Expressions:
  orExpr       = orExpr:x "||" andExpr:y                                             -> [#binop, "||", x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" eqExpr:y                                             -> [#binop, "&&", x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ( "=="  relExpr:y                                          -> [#binop, "==",  x, y]
                          | "!="  relExpr:y                                          -> [#binop, "!=",  x, y]
                          | "===" relExpr:y                                          -> [#binop, "===", x, y]
                          | "!==" relExpr:y                                          -> [#binop, "!==", x, y]
                          )
               | relExpr,
  relExpr      = relExpr:x ( ">"          addExpr:y                                  -> [#binop, ">",   x, y]
                           | ">="         addExpr:y                                  -> [#binop, ">=",  x, y]
                           | "<"          addExpr:y                                  -> [#binop, "<",   x, y]
                           | "<="         addExpr:y                                  -> [#binop, "<=",  x, y]
                           )
               | addExpr,
  addExpr      = addExpr:x "+" mulExpr:y                                             -> [#binop, "+",   x, y]
               | addExpr:x "-" mulExpr:y                                             -> [#binop, "-",   x, y]
               | mulExpr,
  mulExpr      = mulExpr:x "*" unary:y                                               -> [#binop, "*",   x, y]
               | mulExpr:x "/" unary:y                                               -> [#binop, "/",   x, y]
               | mulExpr:x "%" unary:y                                               -> [#binop, "%",   x, y]
               | unary,
  unary        = "-"      primExpr:p                                                 -> [#unop,  "-",   p]
               | "+"      primExpr:p                                                 -> [#unop,  "+",   p]
               | "!"      unary:p                                                    -> [#unop,  "!",   p]
               | primExpr,
  primExpr     = primExpr:p ( "[" expr:i "]"                                         -> [#getp, i, p]
                            | "." "name":m "(" listOf(#expr, ','):as ")"             -> [#send, m, p].concat(as)
                            | "." "name":f                                           -> [#getp, [#string, f], p]
                            | "(" listOf(#expr, ','):as ")"                          -> [#call, p].concat(as)
                            )
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                                      -> e
               | "name":n                                                            -> [#get, n]
               | "number":n                                                          -> [#number, n]
               | "[" enum(#expr, ','):es "]"                                         -> [#arr].concat(es),

  assoc        = iName:n ":=" orExpr:e                                               -> [n, e],

  allocation   = listOf(#assoc, #spaces),
};
